SBCL supports @dfn{Gray streams}, user-overloadable CLOS classes whose
instances can be used as Lisp streams (e.g. passed as the first
argument to @code{format}).  Additionally, the bundled contrib module
@dfn{sb-simple-streams} implements a subset of the Franz Allegro
simple-streams proposal.

@menu
* Gray Streams::
* Simple Streams::
@end menu

@node Gray Streams
@section Gray Streams

@include class-sb-gray-fundamental-stream.texinfo
@include fun-sb-gray-stream-advance-to-column.texinfo
@include fun-sb-gray-stream-clear-input.texinfo
@include fun-sb-gray-stream-clear-output.texinfo
@include fun-sb-gray-stream-finish-output.texinfo
@include fun-sb-gray-stream-force-output.texinfo
@include fun-sb-gray-stream-fresh-line.texinfo
@include fun-sb-gray-stream-line-column.texinfo
@include fun-sb-gray-stream-line-length.texinfo
@include fun-sb-gray-stream-listen.texinfo
@include fun-sb-gray-stream-peek-char.texinfo
@include fun-sb-gray-stream-read-byte.texinfo
@include fun-sb-gray-stream-read-char-no-hang.texinfo
@include fun-sb-gray-stream-read-char.texinfo
@include fun-sb-gray-stream-read-line.texinfo
@include fun-sb-gray-stream-read-sequence.texinfo
@include fun-sb-gray-stream-start-line-p.texinfo
@include fun-sb-gray-stream-terpri.texinfo
@include fun-sb-gray-stream-unread-char.texinfo
@include fun-sb-gray-stream-write-byte.texinfo
@include fun-sb-gray-stream-write-char.texinfo
@include fun-sb-gray-stream-write-sequence.texinfo
@include fun-sb-gray-stream-write-string.texinfo

@node Simple Streams
@comment  node-name,  next,  previous,  up
@section Simple Streams
@include sb-simple-streams/sb-simple-streams.texinfo
